/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pantallas;

import timbiriche.IObservador;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import timbiriche.Cliente;
import timbiriche.Cuadro;
import timbiriche.Jugador;
import timbiriche.Linea;
import timbiriche.Nodo;
import controles.Partida;
import controles.IFacadaDeNegocio;
import timbiriche.ColorJugador;

/**
 *
 * @author rene_
 */
public class Lienzo extends javax.swing.JPanel implements IObservador{

    private List<Cliente> listaDeJugadores;
    private List<Nodo> listaDeNodos;
    private List<Linea> listaDeLineas;
    private List<Cuadro> listaDeCuadros;
    private Nodo nodoInicio;
    private Nodo nodoFinal;
    private Linea linea;
    private Cliente jugador;
     private List<IObservador> listaObservadores;
    private Partida partida;
    private IFacadaDeNegocio facadaDeNegocio;
    
    /**
     * Creates new form pantallaJuego
     * @param listaDeJugadores
     * @param cliente
     * @param facadaDeNegocio
     */
    public Lienzo(List<Cliente> listaDeJugadores, Cliente cliente, IFacadaDeNegocio facadaDeNegocio) {
        initComponents();
        this.listaDeNodos = new ArrayList<>();
        this.listaDeLineas = new ArrayList<>();
        this.listaDeCuadros = new ArrayList<>();
        this.listaDeJugadores = listaDeJugadores;
        this.setSize(860, 860);
        this.jugador = cliente;
        this.listaObservadores = new ArrayList<>();
        this.facadaDeNegocio = facadaDeNegocio;
    }
    
    public Jugador getTurnoJugador() {
        return (Jugador)jugador;
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2 = (Graphics2D) g.create();
        for (Linea lineaLista : listaDeLineas) {
            lineaLista.pintar(g2);
        }
        
        for (Cuadro cuadro : listaDeCuadros) {
            cuadro.pintar(g2);
        }
        
        for(Nodo nodo: this.listaDeNodos) {
            nodo.setColor(Color.BLACK);
            nodo.pintar(g2);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_Puntuacion = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel_Turno = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel_Icono = new javax.swing.JLabel();
        nombreLocal = new javax.swing.JLabel();
        colorLocal = new javax.swing.JLabel();

        jPanel_Puntuacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Puntuaci√≥n");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "null"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Turno");

        jLabel_Turno.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        jLabel_Turno.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton1.setText("Abandonar Partida");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel_Icono.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        nombreLocal.setText("(Nombre)");

        colorLocal.setText("(Color)");

        javax.swing.GroupLayout jPanel_PuntuacionLayout = new javax.swing.GroupLayout(jPanel_Puntuacion);
        jPanel_Puntuacion.setLayout(jPanel_PuntuacionLayout);
        jPanel_PuntuacionLayout.setHorizontalGroup(
            jPanel_PuntuacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_PuntuacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_PuntuacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_PuntuacionLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Turno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_Icono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel_PuntuacionLayout.createSequentialGroup()
                        .addGroup(jPanel_PuntuacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nombreLocal)
                            .addComponent(colorLocal))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel_PuntuacionLayout.setVerticalGroup(
            jPanel_PuntuacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_PuntuacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel_Turno, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel_Icono, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nombreLocal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorLocal)
                .addGap(31, 31, 31))
        );

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 943, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (this.partida.isTurnoJugador()) {
            Nodo nodo = validarClick(evt.getPoint());
            if (nodo != null) {
                if (nodoInicio == null) {
                    nodoInicio = nodo;
                } else {
                    if (!nodoInicio.equals(nodo)) {
                        nodoFinal = nodo;
                        try {
                            if (this.validarMovimiento()) {
                                this.registrarMovimiento();
                            }
                            else {
                                repaint(); //volver los puntos negros otra vez
                            }
                        } catch (Exception ex) {
                            this.mostrarMensaje(ex.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
                            repaint(); //volver los puntos negros otra vez
                        }
                        nodoInicio = null;
                        nodoFinal = null;
                    }
                }
            } else {
                repaint();
                this.mostrarMensaje("Elija un nodo", "Error", JOptionPane.WARNING_MESSAGE);
                nodoInicio = null;
                nodoFinal = null;
            }
        }
    }//GEN-LAST:event_formMousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int opcion = this.mostrarMensajeDeConfirmacion();
        if(opcion == JOptionPane.OK_OPTION) {
            this.llamarAbandonarPartida();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
   
    public void llamarAbandonarPartida() {
        this.facadaDeNegocio.abandonarPartida(listaDeJugadores, jugador);
        this.notificarObservadores();
    }
    
    /**
     * 
     * @return
     * @throws Exception 
     */
    public boolean validarMovimiento() throws Exception {
        if(!this.validarLineaNueva()) {
            throw new Exception("Linea ya realizada");
        }
        if(!this.validarDistancia(linea)){
            throw new Exception("Linea no permitida");
        }
        return true;
    }
    
    /**
     * 
     */
    public static boolean acabado = false;
    public void validarGanador() {
        if(!acabado){
            acabado = true;
            int puntajeMasAlto = this.partida.obtenerPuntajeMasAlto();
            int puntosJugador = (Integer) jTable1.getValueAt(0, this.listaDeJugadores.indexOf(this.jugador));

            if(puntajeMasAlto == puntosJugador) {
                this.mostrarMensaje("Has ganado", "Fin del juego", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.mostrarMensaje("Has perdido", "Fin del juego", JOptionPane.ERROR_MESSAGE);
            }
        }
        this.notificarObservadores();
    }
    
    
    /**
     * 
     * @param mensaje
     * @param titulo
     * @param tipoDeMensaje 
     */
    public void mostrarMensaje(String mensaje, String titulo, int tipoDeMensaje) {
        JOptionPane.showMessageDialog(this, mensaje, titulo, tipoDeMensaje);
    }
    
    public int mostrarMensajeDeConfirmacion() {
        int opcion = JOptionPane.showConfirmDialog(this, "¬øDesea salir del juego?", "Mensaje", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        return opcion;
    }
    
    /**
     * 
     * @return 
     */
    public boolean validarLineaNueva() {
        linea = new Linea(nodoInicio.getEjeX(), nodoInicio.getEjeY(), nodoFinal.getEjeX(), nodoFinal.getEjeY(), ((Jugador) this.jugador).getColor());
        return !this.listaDeLineas.contains(linea);
    }
    
    /**
     * 
     */
    public void registrarMovimiento() {
        this.listaDeLineas.add(linea);
        this.partida.asignarNodos(linea);
        this.enviarMovimiento(linea);
        this.partida.actualizarPuntaje(linea);
        this.dibujarJugadorTurno();
        if(this.partida.isTableroLleno()) {
            this.validarGanador();
        }
        repaint();
//        this.actualizarPuntaje(linea);
    }
    
    /**
     * 
     */
    public void dibujarJugadorTurno() {
        Jugador jugadorTurno = (Jugador)this.listaDeJugadores.get(this.partida.getTurno());
        if(jugadorTurno != null) { //cuando 
            this.jLabel_Icono.setIcon(jugadorTurno.getAvatar().getIcono());
            this.jLabel_Turno.setText(jugadorTurno.getNombre());
        }
    }
    
    /**
     * 
     * @param click
     * @return 
     */
    public Nodo validarClick(Point click) {
        for (Nodo nodo : listaDeNodos) {
            if(nodo.getFigura().contains(click)) {
                if (((Jugador)this.jugador).getColor().equals(Color.black)) {
                    nodo.setColor(Color.WHITE);
                } else {
                    nodo.setColor(((Jugador)this.jugador).getColor());
                }
                Graphics2D g2 = (Graphics2D) this.getGraphics();
                nodo.pintar(g2);
                return nodo;
            }
        }
        return null;
    }
    
    
    
    public boolean validarDistancia(Linea linea) {
        double distancia = Math.sqrt(Math.pow(linea.getEjeXPuntoFinal() - linea.getEjeXPuntoInicial(), 2) + Math.pow(linea.getEjeYPuntoFinal() - linea.getEjeYPuntoInicial(), 2));
        return distancia == this.partida.obtenerDistanciaEntreNodos();
    }
    
    public JPanel getPanel() {
        return this.jPanel_Puntuacion;
    }
    
    public void crearModeloDePanel() {
        DefaultTableModel dtm = new DefaultTableModel();
        List<Integer> puntuacion = new ArrayList();
        for (int i = 0; i < listaDeJugadores.size(); i++) {
            puntuacion.add(0);
        }
        jTable1.setEnabled(false);
        dtm.setColumnIdentifiers(this.listaDeJugadores.toArray());
        dtm.addRow(puntuacion.toArray());
        
        List<String> colores = new ArrayList();
        for (int i = 0; i < listaDeJugadores.size(); i++) {
            String nomCol = "";
            for (ColorJugador c : ColorJugador.values()) {
                if (c.getColor().equals(((Jugador) listaDeJugadores.get(i)).getColor()))
                    nomCol = c.name();
            }
            colores.add(nomCol.charAt(0) + nomCol.toLowerCase().substring(1, nomCol.length()));
        }
        dtm.addRow(colores.toArray());
        
        jTable1.setModel(dtm);
        this.jPanel_Puntuacion.setSize(350, 650);
        repaint();
        this.jTable1.getColumnModel().getColumn(0).getHeaderValue();
    }
    
    public void enviarMovimiento(Linea linea) {
        this.facadaDeNegocio.enviarMovimiento(listaDeJugadores, jugador, linea);
    }
    
    @Override
    public void actualizar() {
        this.validarJugadores();
        
        if(this.listaDeLineas.size() > 0) {
            Linea lineaNueva = this.listaDeLineas.get(this.listaDeLineas.size()-1);
            this.partida.asignarNodos(lineaNueva);
            repaint();
            this.partida.actualizarPuntaje(lineaNueva);
        }
        
        if (this.partida.isTableroLleno()) {
            this.validarGanador();
        }
        dibujarJugadorTurno();
        
        repaint();
    }
    
    public void validarJugadores() {
        if(this.listaDeJugadores.size() == 1) {
            this.validarGanador();
        }
    }
    
    public void notificarObservadores() {
        for (IObservador iteradorObservador : listaObservadores) {
            iteradorObservador.actualizar();
        }
    }

    public void agregarObservador(IObservador observador) {
        this.listaObservadores.add(observador);
    }
    
    public void setListaDeJugadores(List<Cliente> listaJugadores) {
        this.listaDeJugadores = listaJugadores;
    }
    
    public void prepararLienzo() {
        this.listaDeCuadros.clear();
        this.listaDeLineas.clear();
        this.listaDeNodos.clear();
        crearModeloDePanel();
        this.partida = new Partida(this.jugador);
        this.partida.setJugador(jugador);
        this.partida.setListaLineas(this.listaDeLineas);
        this.partida.setListaDeNodos(this.listaDeNodos);
        this.partida.setListaDeJugadores(listaDeJugadores);
        this.partida.setListaDeCuadros(this.listaDeCuadros);
        this.partida.setTablaPuntuacion(this.jTable1);
        this.partida.setAnchoTablero(this.getWidth());
        this.partida.agregarObservador(this);
        this.partida.crearNodosDeTablero();
        Thread hilo = new Thread(this.partida);
        this.dibujarJugadorTurno();
        hilo.start();
        repaint();
        this.nombreLocal.setText("Tu nombre: " + ((Jugador) this.jugador).getNombre());
        
        String nomCol = "";
        for (ColorJugador c : ColorJugador.values()) {
            if (c.getColor().equals(((Jugador) this.jugador).getColor()))
                nomCol = c.name();
        }
        this.colorLocal.setText("Tu color: " + nomCol.charAt(0) + nomCol.toLowerCase().substring(1, nomCol.length()));
    }

    public List<Nodo> getListaDeNodos() {
        return listaDeNodos;
    }

    public void setListaDeNodos(List<Nodo> listaDeNodos) {
        this.listaDeNodos = listaDeNodos;
    }

    public List<Linea> getListaDeLineas() {
        return listaDeLineas;
    }

    public void setListaDeLineas(List<Linea> listaDeLineas) {
        this.listaDeLineas = listaDeLineas;
    }

    public List<Cuadro> getListaDeCuadros() {
        return listaDeCuadros;
    }

    public void setListaDeCuadros(List<Cuadro> listaDeCuadros) {
        this.listaDeCuadros = listaDeCuadros;
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel colorLocal;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel_Icono;
    private javax.swing.JLabel jLabel_Turno;
    private javax.swing.JPanel jPanel_Puntuacion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel nombreLocal;
    // End of variables declaration//GEN-END:variables
}
